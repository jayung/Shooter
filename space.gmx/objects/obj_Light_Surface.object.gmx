<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1600</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = -1;
surf2 = -1;
global.lightcounter = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.lightcounter += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(surf)
{
surface_free(surf);
}
if surface_exists(surf2)
{
surface_free(surf2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    This object handles drawing a lot of the lightning techniques
    We create what is called a surface.
    This is an area that we draw to rather than the screen.
    We first draw pure black. This creates darkness.
    When we draw colors with a blend mode of subtract its actually
    erasing pixel data. Causing the effect of light in a pure dark room
    
*/
if surface_exists(surf)
{   
    // If our surface exists, we can use it
    surface_set_target(surf);
    // We draw black to the screen (with how black we want it) 1.0 is max black
    draw_clear_alpha(c_black, 1.0);
    
    // We set our blend mode to erase colors
    draw_set_blend_mode(bm_subtract);
    // We draw our light object. Anything drawn to while a surface has a target
    // You draw to that surface.
    with (obj_light)
        {
        draw_sprite_ext(sprite_index, image_index, x / 2, y / 2, image_xscale * 2, image_yscale * 2, image_angle, c_black, 1);
        }
    // You have to set your blend back to normal when done using it
    // Else everything will remain drawing in that blend mode
    draw_set_blend_mode(bm_normal);
    // We have to reset our target when we are done drawing, else everything draws to it
    surface_reset_target();
    // Once we draw everything to our surface, we then draw the surface itself
    // We define a color and an alpha which effects how dark it looks
    draw_surface_ext(surf, 0, 0, 2, 2, 0, c_black, 1.0);
} else {
    // Every room end (never?) we create a new surface
    surf = surface_create(room_width / 2, room_height / 2);
}
        
/*
    Advance lighting
    The code above draws a surface, if you don't do anything past this point
    you get a pure black screen, with lights lighting it
    No colored lights, just visible / non visible.
    
*/

// Here we say with every enemy 2, we grab its light and adjust its color
// It should grab its color data from its variables
with (obj_enemy_2){
    with (enemyLight) {
        image_blend = make_colour_hsv(255,255,255);
    }
}

// Here we draw our colors to the screen
// The first time we draw our lights, it is to a surface to
// create a lighting effect. basically modifiyng the ALPHA of a black screen
// Then we draw the lights again after, with colors
with (obj_light)
{
    draw_set_blend_mode(bm_add);
    draw_self();
    draw_set_blend_mode(bm_normal);
}

// Draw the players outline that glows
// Shader used here
with (obj_player_outline)
{   
    draw_set_blend_mode(bm_add);
    // We use a variable to keep track of our shader
    currentShader = shader3;
    shader_set(currentShader);
    // We create local variables to 'store' the shaders variables.
    // Effectively grabbing the shaders variables
    var vRes = shader_get_uniform(currentShader,"vRes");
    var vTime = shader_get_uniform(currentShader,"vTime");
    var vSwitch = shader_get_uniform(currentShader,"vSwitch");
    var yOffset = shader_get_uniform(currentShader,"yOffset");
        
    // Modify global counter used for this shader
    global.counter += 1;
    // This is how you take a variable from our game and
    // Send it to the open GL code
    // WE get the variable above, now we set it
    shader_set_uniform_f(vRes,view_wport[0],view_hport[0]);
    shader_set_uniform_f(vTime, global.counter);
    shader_set_uniform_f(vSwitch,global.vswitch);
    shader_set_uniform_f(yOffset,global.y_offset0);

   // shader_set(currentShader);
    draw_self();
    
    //Once we draw what we want using our shader, reset shader
    shader_reset();
    // Reset blend mode
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
