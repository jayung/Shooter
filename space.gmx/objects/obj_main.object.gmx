<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On Create Main  

global.touchX = 0; //where do you touch the screen?
global.isTouching = 0; //if 1 then player is touching screen
charWidth = 11; //half of sprite width


// We create our player object
instance_create(0, 0, obj_player);
// We create a sound buffer object. This object will play our background music
// But also handle our beats per minute values. Used to pulsate colors of lighting
// This object has a global variable that obj_control for lights needs
instance_create(0, 0, obj_sound_buffer);


// We will spawn a 'wave' object based on this global value.
// When a wave completes it will call a new wave object.
global.waveCounter = 1; // Setting to 1 triggers the first wave.
global.totalWave = 1; // what wave are we on? wave counter resets
// Create a controller to control the wave of enemies
instance_create(0,0, obj_waveController);

// our total score as a player
global.playerScore = 0;
//create light for score area
playerLight = instance_create(5, 0, obj_light);
playerLight.lightSize = 8;

// Sound Code
musicPlayer =  sound_music;
musicIndex = 0;
if !audio_is_playing(musicPlayer)
   {
   //musicIndex = audio_play_sound(musicPlayer, 10, true);
   }
   
   
//instance_create(0,0,obj_waveMenu);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step Main


// If we are touching the screen, set global variables
// Any logic from an object that has to deal with touching the screen 
// Will actually be dealt with in that object, with if (.isTouching == 1)
if device_mouse_check_button(0, mb_left)
{
    global.touchX  = device_mouse_x(0) - charWidth;
    global.isTouching = 1;
} else {
    global.isTouching = 0;
}

// Audio Code
//show_debug_message(string(       audio_sound_get_track_position(musicIndex)                   ));
//show_debug_message(string(       audio_sound_get_track_position(zmusicIndex)                   ));

//audio_sound_pitch(musicPlayer, 4);
//soundCounter += 1;
/*
if (soundCounter &gt;= 60){
soundCounter = 0;
audio_debug(true);
audio_stop_sound(musicIndex2);
rate = 44100;
show_debug_message(string( (sin(obj_player.x*10.0) ) ));
hertz = 200  * (sin(obj_player.x*10.0) / soundCounter);//irandom_range(220, 1880);
if (hertz &lt; 200){
    hertz = 200;
}
samples = 44100;
bufferId = buffer_create(rate, buffer_fast, 1);
buffer_seek(bufferId, buffer_seek_start, 0);
num_to_write = rate / hertz;
val_to_write = 1;
for (var i = 0; i &lt; (samples / num_to_write) + 1; i++;)
   {
   for (var j = 0; j &lt; num_to_write; j++;)
      {
      buffer_write(bufferId, buffer_u8, val_to_write * 255);
      }
   val_to_write = (1 - val_to_write);
   }
soundId = audio_create_buffer_sound(bufferId, buffer_u8, rate, 0, 44100, audio_mono);
musicIndex2 = audio_play_sound(soundId, 10, true);
}
*/


//show_debug_message(string(       global.beat   ));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI
draw_set_font(fnt_gameFont);
draw_set_colour(c_aqua);
draw_text(0, 0, "Score: " + string(global.playerScore));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw phase

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
