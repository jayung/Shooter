<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Main    

//lights
surf = surface_create(room_width, room_height);
surfScale = 1;

///initialize variables
global.counter = 1;
global.counter2 = 0;
global.vswitch = 0;
//showText = true;
global.y_offset0 = 0;
global.fCount = 18;
global.mainSurface = -1;

// beats per minute
global.songBeat = 0.0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main

// beat per minute

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_control</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//bm_one
//bm_src_color
//  bm_inv_src_color
//bm_src_alpha
//bm_inv_src_alpha
//bm_dest_alpha
//bm_inv_dest_alpha
//bm_dest_color   
//bm_inv_dest_color
//bm_src_alpha_sat

//bm_dest_color
//bm_src_alpha
// bm_add
// bm_subtract
// bm_max
// bm_normal

    currentShader = shader_blue;
    blendMode = bm_subtract;
    
    draw_set_blend_mode(blendMode); //bm_subtract
    shader_set(currentShader);
    if(!surface_exists(surf))
     surf = surface_create(view_wport[0],view_hport[0]);
    
    surface_set_target(surf);
    draw_clear_alpha(c_white,1.0);
    surface_reset_target();
    
    draw_surface_stretched(surf,0,0,view_wport[0],view_hport[0]);
    

    

surface_set_target(surf);
draw_clear(c_black);


var blendMode = bm_src_alpha;//bm_inv_src_color  ;
var blendIntensity = 0.8;
draw_enable_alphablend(true);




    var vRes = shader_get_uniform(currentShader,"vRes");
    var vTime = shader_get_uniform(currentShader,"vTime");
    var vSwitch = shader_get_uniform(currentShader,"vSwitch");
    var yOffset = shader_get_uniform(currentShader,"yOffset");
    distanceF = shader_get_uniform( currentShader,"distanceF");
   shadeType = shader_get_uniform( currentShader,"shadeType");
    shader_set_uniform_f(distanceF, global.songBeat);
   // var distanceF = shader_get_uniform(point_distance(0, 0, x2, y2),"distanceF");
    global.counter += 1;
    shader_set(currentShader);
    shader_set_uniform_f(vRes,view_wport[0],view_hport[0]);
    shader_set_uniform_f(vTime, global.counter);
    shader_set_uniform_f(vSwitch,global.vswitch);
    shader_set_uniform_f(yOffset,global.y_offset0);
    shader_set_uniform_f(shadeType, 1.0);

with(obj_light)
{ 
     draw_set_blend_mode(bm_src_color); // bm_src_color
     draw_sprite_ext(spr_light3,0,x*other.surfScale,y*other.surfScale,lightSize*other.surfScale,lightSize*other.surfScale,0,make_color_rgb(255, 255, 255),1);
 
  //draw_sprite_ext(spr_light,0,x*other.surfScale,y*other.surfScale,lightSize*other.surfScale,lightSize*other.surfScale,0,make_color_rgb(255, 255, 255),1);
    draw_set_blend_mode(bm_normal);
}
shader_reset();



with(obj_lightBlue)
{
 //draw_set_blend_mode(blendMode);
 //draw_sprite_ext(spr_light,0,x*other.surfScale,y*other.surfScale,lightSize*other.surfScale,lightSize*other.surfScale,0,make_color_rgb(0, 0, 255),0.9);
  /*
  draw_set_blend_mode(blendMode);
 draw_sprite_ext(spr_light,0,x*other.surfScale,y*other.surfScale,lightSize*other.surfScale,lightSize*other.surfScale,0,make_color_rgb(0, 0, 255),1.0);
 draw_set_blend_mode(bm_normal);  
 */
 draw_set_blend_mode(bm_src_color);
 
     draw_sprite_ext(spr_light3,0,x*other.surfScale,y*other.surfScale,lightSize*other.surfScale,lightSize*other.surfScale,0,make_color_rgb(255, 255, 255),1);
 
  //draw_sprite_ext(spr_light,0,x*other.surfScale,y*other.surfScale,lightSize*other.surfScale,lightSize*other.surfScale,0,make_color_rgb(255, 255, 255),1);
    draw_set_blend_mode(bm_normal);
}
with(obj_lightRed)
{
//bm_zero
//bm_one
//bm_src_color
//bm_inv_src_color
//bm_src_alpha
//bm_inv_src_alpha
//bm_dest_alpha
//bm_inv_dest_alpha
//bm_dest_color   
//bm_inv_dest_color
//bm_src_alpha_sat

//bm_dest_color
//bm_src_alpha

/*
 draw_set_blend_mode(blendMode);
 draw_sprite_ext(spr_light,0,x*other.surfScale,y*other.surfScale,lightSize*other.surfScale,lightSize*other.surfScale,0,make_color_rgb(255, 0, 0),0.33);

 draw_set_blend_mode(bm_normal); 
 */
 draw_set_blend_mode(bm_src_color);
 
     draw_sprite_ext(spr_light3,0,x*other.surfScale,y*other.surfScale,lightSize*other.surfScale,lightSize*other.surfScale,0,make_color_rgb(255, 255, 255),1);
 
  //draw_sprite_ext(spr_light,0,x*other.surfScale,y*other.surfScale,lightSize*other.surfScale,lightSize*other.surfScale,0,make_color_rgb(255, 255, 255),1);
    draw_set_blend_mode(bm_normal); 
}

    shader_reset();
   currentShader = shader_blue;
shader_set(currentShader);
distanceF = shader_get_uniform( currentShader,"distanceF");
shadeType = shader_get_uniform( currentShader,"shadeType");
shader_set_uniform_f(shadeType, 0.0);  
shader_set_uniform_f(distanceF, global.songBeat);

with(obj_player)
{ 
    draw_self();
     //draw_set_blend_mode(bm_src_color);
     //draw_sprite_ext(spr_light3,0,x*other.surfScale,y*other.surfScale,lightSize*other.surfScale,lightSize*other.surfScale,0,make_color_rgb(255, 255, 255),1);
     //draw_set_blend_mode(bm_normal);
}
with(obj_lasor1)
{ 
    draw_self();
     //draw_set_blend_mode(bm_src_color);
     //draw_sprite_ext(spr_light3,0,x*other.surfScale,y*other.surfScale,lightSize*other.surfScale,lightSize*other.surfScale,0,make_color_rgb(255, 255, 255),1);
     //draw_set_blend_mode(bm_normal);
}
shader_reset();
  currentShader = shader_blue;
shader_set(currentShader);
distanceF = shader_get_uniform( currentShader,"distanceF");
shadeType = shader_get_uniform( currentShader,"shadeType");
shader_set_uniform_f(shadeType, 1.0);  
shader_reset();
surface_reset_target();
draw_surface_ext(surf,0,0,1/surfScale,1/surfScale,0,c_white,0.9);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
