<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_lasor1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// How much damage does this do on contact?
damage = 1;
// We create a light object to see the lasor
lasorLight = instance_create(x, y, obj_light);
//lasorLight.lightSize = 2;
//lasorLight.lightType = 0.0;


// When we fire a lasor, we point the trajecory to Y = -20, the despawn point
// We draw a line there, and plot an X value.
// When you create a new lasor object be sure to set this value
xDiff = 1;
// We need to keep track of where we started, to know where to plot a line to/from
xStart = x;

// RGB of the light, 
tRed = obj_player.tRed;
tGreen = obj_player.tGreen;
tBlue = obj_player.tBlue;

image_blend = make_color_rgb(other.tRed, other.tGreen, other.tBlue);
with (lasorLight) {
        tRed = other.tRed;
        tBlue = other.tBlue;
        tGreen = other.tGreen;
        image_blend = make_color_rgb(tRed, tGreen, tBlue);
        //make_colour_hsv(other.tRed, other.tBlue, other.tGreen);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Also destroy the light when this object gets destroyed
with (lasorLight) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lasor 1 on step
//y -= 2;

// Our destination point is ( value , -50 ) for [x, y]
// We have a multiplier of 100 for how far away each bullet can be
transx = xStart - (xDiff*100);
transy = -50;

// We move towards this point at a velocity of 2
move_towards_point( transx, transy, 2 );

// We offset our lasor Light

lasorLight.x = x + (sprite_width / 2);
lasorLight.y = y - (sprite_height /2 );

// Rotate our lasor to point towards the location
// Since its default a up and down line, we offset by 90
image_angle = point_direction(x, y, transx, transy) + 90;

// If our light wasn't a perfect circle, we could also set the lights
// Image angle, to rotate with our lasor
//lasorLight.image_angle = other.image_angle;

/*
    Object Despawn Criteria
    Modify this if there are multiple ways a PLAYER lasor can be despawned
    off screen. All lasors should despawn on enemy contact within the enemy class
    not here.
*/
if (y &lt; -20){
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
