<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Health = 2; //How much damage until this unit is dead
velocity = 2; // How fast does he move down the screen
enemyScore = 5; // How many points is he worth

// Create the enemy light
enemyLight = instance_create(x, y, obj_light);
// How big is that light?
enemyLight.lightSize = 4;

// Counter used with Rate to fire lasors
lasorCounter = 0;
lasorFireRate = 60; // when counter gets to 60 you can fire again (1 second)
lasorHeightOffset = 8; //where to draw the lasor Y axis? Adjust per sprite for visuals

//half of sprite width. Since my sprite isn't perfect, I subtract one pixel
charWidth = sprite_width / 2 - 1; 

// We will use a general counter incase we do SINE movement.
counter = 0;
coordinateIndex = 0;
forward = 1;

depth = -10;
// Enemies will be considered of a certain element, red blue and green
// depending on that they will show up as that color, and in some time
// program weaknesses. TYPE RED, green and blue can range from 0 to 255 each.

// This can leave room for % weaknesses and mixed colors down the line
tRed = 255;
tGreen = 0;
tBlue = 0; 


image_blend = make_color_rgb(other.tRed, other.tBlue, other.tGreen);
with (enemyLight) {
        tRed = other.tRed;
        tBlue = other.tBlue;
        tGreen = other.tGreen;
        image_blend = make_color_rgb(tRed, tBlue, tGreen);
        //make_colour_hsv(other.tRed, other.tBlue, other.tGreen);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.playerScore += enemyScore;
with (enemyLight) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step Enemy 1

// We add a counter to every enemy object incase it is needed in movement.
//counter += 1;
pointsX = ds_list_create();
pointsY = ds_list_create();
ds_list_add(pointsX, 0, 80 , 160, 240, 320);
ds_list_add(pointsY, 0, 95, 0, 95, 0);

// Movement pattern here
// ***************************** Move Pattern *************************************
// In this movement pattern we add to the Y for a straight down movement

if(forward == 1){
    if(round(x) == ds_list_find_value(pointsX, coordinateIndex) &amp;&amp; round(y) == ds_list_find_value(pointsY, coordinateIndex)){
        if (coordinateIndex &lt; ds_list_size(pointsX)-1){
            coordinateIndex += 1;
        } else {
            forward *= -1;
        }
    } else {
        move_towards_point (ds_list_find_value(pointsX, coordinateIndex), ds_list_find_value(pointsY, coordinateIndex), 1);
    }
}

if(forward == -1){
    if(round(x) == ds_list_find_value(pointsX, coordinateIndex) &amp;&amp; round(y) == ds_list_find_value(pointsY, coordinateIndex)){
        if (coordinateIndex &gt; 0){
            coordinateIndex -= 1;
        } else {
            forward *= -1;
        }
    } else {
        move_towards_point (ds_list_find_value(pointsX, coordinateIndex), ds_list_find_value(pointsY, coordinateIndex), 1);
    }
}

// ***************************** End Move Pattern *********************************

//Lighting
// We set the light equal to the center of our sprite.
enemyLight.x = x + (sprite_width/2);
enemyLight.y = y + (sprite_height/2);

// Check health
if (Health &lt;= 0){
    instance_destroy();
}
// Fire the lasor if...
if (lasorCounter == 0){
        // Create a lasor instance
        instance_create(x + charWidth, y + lasorHeightOffset, obj_enemy_lasor1);
        // Reset our lasorCounter to fire rate
        lasorCounter = lasorFireRate;
    }
    
// Lasor Controller (Subtract 1 until 0 based on fire rate)
if (lasorCounter &gt; 0){
    lasorCounter -= 1;
}

//  If out of bounds then..
if (y &gt; 500){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_missle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Health -= obj_missle.damage;
with instance_place(x, y, obj_missle) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_lasor1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Health -= obj_lasor1.damage;
with instance_place(x, y, obj_lasor1) {
                instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
